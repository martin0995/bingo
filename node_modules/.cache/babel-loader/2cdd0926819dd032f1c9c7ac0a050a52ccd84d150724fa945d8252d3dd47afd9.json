{"ast":null,"code":"var _jsxFileName = \"/Users/martinhofmann/bingo/bingo/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Card from \"./common/Card\";\nimport Confetti from \"react-confetti\";\nimport winningMatrix from \"./utils/winningMatrix\";\nimport star from \"./images/star.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [numbers, setNumbers] = useState(generateNumbers()); // Generate random numbers for the game.\n  const [coveredSquares, setCoveredSquares] = useState([]); // Array with selected indexes (to check when a user wins)\n  const [reward, setReward] = useState(false);\n  // const [winner, setWinner] = useState(false);\n  const [winningPatterns, setWinningPatterns] = useState(winningMatrix);\n  const [completedPattenrs, setcompletedPattenrs] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  function generateNumbers() {\n    const numbers = [];\n    while (numbers.length < 25) {\n      const number = Math.floor(Math.random() * 75) + 1;\n      if (!numbers.includes(number)) {\n        numbers.push(number);\n      }\n    }\n    return numbers;\n  }\n\n  // Add selected indexes to the winning array:\n  const handleSquareClick = index => {\n    const indexInArray = coveredSquares.indexOf(index);\n    if (indexInArray !== -1) {\n      // The square was already covered, remove it from the array\n      setCoveredSquares(prev => {\n        const newArray = [...prev];\n        newArray.splice(indexInArray, 1);\n        return newArray;\n      });\n    } else {\n      // The square was not covered yet, add it to the array\n      setCoveredSquares(prev => [...prev, index]);\n    }\n  };\n  const checkWinner = () => {\n    for (const pattern of winningPatterns) {\n      if (pattern.every(square => coveredSquares.includes(square))) {\n        // The player has completed the pattern, show an alert\n        // alert(\"Congratulations, you have won!\");\n        setcompletedPattenrs([...completedPattenrs, pattern]);\n        setReward(true);\n        setWinningPatterns(winningPatterns.filter(p => p !== pattern));\n        setTimeout(() => {\n          setReward(false);\n        }, 10000);\n      }\n    }\n  };\n  useEffect(() => {\n    checkWinner();\n    // setTimeout(() => {\n    //   setReward(false);\n    // }, 10000);\n  }, [coveredSquares]);\n  const handleToggle = () => {\n    setToggle(!toggle);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: toggle ? \"bg-gradient-to-r from-green-200 to-blue-300 lg:h-screen lg:w-screen h-fit w-fit px-4 flex flex-col justify-between\" : \"bg-gradient-to-r from-green-200 to-blue-300 h-screen lg:max-w-screen px-4 flex flex-col justify-between\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      class: \"relative inline-flex items-center cursor-pointer mt-3 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        value: \"\",\n        class: \"sr-only peer\",\n        onClick: () => {\n          handleToggle();\n          setCoveredSquares([]);\n          setReward(false);\n          setWinningPatterns(winningMatrix);\n          setcompletedPattenrs([]);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"ml-3 text-sm font-medium\",\n        children: toggle ? \"Music Bingo\" : \"Classic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), reward && /*#__PURE__*/_jsxDEV(Confetti, {\n      width: window.innerWidth,\n      height: window.innerHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mx-auto sm:w-3/4 sm:h-3/4 md:w-3/4 lg:w-2/3\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"bg-white rounded -rotate-2 p-4\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [0, 1, 2, 3, 4].map(rowIndex => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [0, 1, 2, 3, 4].map(colIndex => {\n              // We get the exact index of the cell:\n              const index = rowIndex * 5 + colIndex;\n              //The middle square is located at index 12. isMiddleSquare is a boolean:\n              const isMiddleSquare = index === 12;\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"w-[110px] h-[110px]\",\n                children: isMiddleSquare ? /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: star,\n                  alt: \"Star\",\n                  className: \"mx-auto\",\n                  id: reward ? \"icon\" : \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 25\n                }, this) : /*#__PURE__*/_jsxDEV(Card, {\n                  number: numbers[index - (index > 12 ? 1 : 0)],\n                  index: index,\n                  onCellClick: () => handleSquareClick(index),\n                  coveredSquares: coveredSquares,\n                  completedPattenrs: completedPattenrs.flat(),\n                  toggle: toggle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 25\n                }, this)\n              }, colIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 21\n              }, this);\n            })\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center p-2 mt-8 mb-2\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"gap-2 p-2 text-lg rounded-full bg-gradient-to-r from-green-300 to-blue-400 hover:from-pink-400 hover:to-yellow-400\",\n        onClick: () => {\n          setNumbers(generateNumbers());\n          setCoveredSquares([]);\n          setReward(false);\n          setWinningPatterns(winningMatrix);\n          setcompletedPattenrs([]);\n        },\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"g463f7IbOZVQb1BGZ4+oW/3+tIw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Card","Confetti","winningMatrix","star","jsxDEV","_jsxDEV","App","_s","numbers","setNumbers","generateNumbers","coveredSquares","setCoveredSquares","reward","setReward","winningPatterns","setWinningPatterns","completedPattenrs","setcompletedPattenrs","toggle","setToggle","length","number","Math","floor","random","includes","push","handleSquareClick","index","indexInArray","indexOf","prev","newArray","splice","checkWinner","pattern","every","square","filter","p","setTimeout","handleToggle","className","children","class","type","value","onClick","fileName","_jsxFileName","lineNumber","columnNumber","width","window","innerWidth","height","innerHeight","map","rowIndex","colIndex","isMiddleSquare","src","alt","id","onCellClick","flat","_c","$RefreshReg$"],"sources":["/Users/martinhofmann/bingo/bingo/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Card from \"./common/Card\";\nimport Confetti from \"react-confetti\";\nimport winningMatrix from \"./utils/winningMatrix\";\nimport star from \"./images/star.png\";\n\nfunction App() {\n  const [numbers, setNumbers] = useState(generateNumbers()); // Generate random numbers for the game.\n  const [coveredSquares, setCoveredSquares] = useState([]); // Array with selected indexes (to check when a user wins)\n  const [reward, setReward] = useState(false);\n  // const [winner, setWinner] = useState(false);\n  const [winningPatterns, setWinningPatterns] = useState(winningMatrix);\n  const [completedPattenrs, setcompletedPattenrs] = useState([]);\n  const [toggle, setToggle] = useState(false);\n\n  function generateNumbers() {\n    const numbers = [];\n\n    while (numbers.length < 25) {\n      const number = Math.floor(Math.random() * 75) + 1;\n      if (!numbers.includes(number)) {\n        numbers.push(number);\n      }\n    }\n    return numbers;\n  }\n\n  // Add selected indexes to the winning array:\n  const handleSquareClick = (index) => {\n    const indexInArray = coveredSquares.indexOf(index);\n\n    if (indexInArray !== -1) {\n      // The square was already covered, remove it from the array\n      setCoveredSquares((prev) => {\n        const newArray = [...prev];\n        newArray.splice(indexInArray, 1);\n        return newArray;\n      });\n    } else {\n      // The square was not covered yet, add it to the array\n      setCoveredSquares((prev) => [...prev, index]);\n    }\n  };\n\n  const checkWinner = () => {\n    for (const pattern of winningPatterns) {\n      if (pattern.every((square) => coveredSquares.includes(square))) {\n        // The player has completed the pattern, show an alert\n        // alert(\"Congratulations, you have won!\");\n        setcompletedPattenrs([...completedPattenrs, pattern]);\n        setReward(true);\n        setWinningPatterns(winningPatterns.filter((p) => p !== pattern));\n        setTimeout(() => {\n          setReward(false);\n        }, 10000);\n      }\n    }\n  };\n\n  useEffect(() => {\n    checkWinner();\n    // setTimeout(() => {\n    //   setReward(false);\n    // }, 10000);\n  }, [coveredSquares]);\n\n  const handleToggle = () => {\n    setToggle(!toggle);\n  };\n\n  return (\n    <div\n      className={\n        toggle\n          ? \"bg-gradient-to-r from-green-200 to-blue-300 lg:h-screen lg:w-screen h-fit w-fit px-4 flex flex-col justify-between\"\n          : \"bg-gradient-to-r from-green-200 to-blue-300 h-screen lg:max-w-screen px-4 flex flex-col justify-between\"\n      }\n    >\n      <label class=\"relative inline-flex items-center cursor-pointer mt-3 mb-4\">\n        <input\n          type=\"checkbox\"\n          value=\"\"\n          class=\"sr-only peer\"\n          onClick={() => {\n            handleToggle();\n            setCoveredSquares([]);\n            setReward(false);\n            setWinningPatterns(winningMatrix);\n            setcompletedPattenrs([]);\n          }}\n        />\n        <div class=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600\"></div>\n        <span class=\"ml-3 text-sm font-medium\">\n          {toggle ? \"Music Bingo\" : \"Classic\"}\n        </span>\n      </label>\n\n      {reward && (\n        <Confetti width={window.innerWidth} height={window.innerHeight} />\n      )}\n\n      <div className=\"mx-auto sm:w-3/4 sm:h-3/4 md:w-3/4 lg:w-2/3\">\n        <table className=\"bg-white rounded -rotate-2 p-4\">\n          <tbody>\n            {[0, 1, 2, 3, 4].map((rowIndex) => (\n              <tr key={rowIndex}>\n                {[0, 1, 2, 3, 4].map((colIndex) => {\n                  // We get the exact index of the cell:\n                  const index = rowIndex * 5 + colIndex;\n                  //The middle square is located at index 12. isMiddleSquare is a boolean:\n                  const isMiddleSquare = index === 12;\n                  return (\n                    <td key={colIndex} className=\"w-[110px] h-[110px]\">\n                      {isMiddleSquare ? (\n                        <img\n                          src={star}\n                          alt=\"Star\"\n                          className=\"mx-auto\"\n                          id={reward ? \"icon\" : \"\"}\n                        />\n                      ) : (\n                        <Card\n                          number={numbers[index - (index > 12 ? 1 : 0)]}\n                          index={index}\n                          onCellClick={() => handleSquareClick(index)}\n                          coveredSquares={coveredSquares}\n                          completedPattenrs={completedPattenrs.flat()}\n                          toggle={toggle}\n                        />\n                      )}\n                    </td>\n                  );\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <div className=\"flex justify-center p-2 mt-8 mb-2\">\n        <button\n          className=\"gap-2 p-2 text-lg rounded-full bg-gradient-to-r from-green-300 to-blue-400 hover:from-pink-400 hover:to-yellow-400\"\n          onClick={() => {\n            setNumbers(generateNumbers());\n            setCoveredSquares([]);\n            setReward(false);\n            setWinningPatterns(winningMatrix);\n            setcompletedPattenrs([]);\n          }}\n        >\n          Play Again\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}